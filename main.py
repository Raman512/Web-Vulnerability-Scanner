import argparse
import re
import requests
import html
from urllib.parse import urlparse
import subprocess


desc = "Tulpar - Web Vulnerability Scanner"
parser = argparse.ArgumentParser(description=desc)
parser.add_argument("action", help="Action: whois portscanner urlEncode method IP2Location FileInputAvailable directoryTraversal fileInclude mail links credit crawl certificate headercheck ")
parser.add_argument("web_URL", help="URL")
args = parser.parse_args()



print('''



.##......##.########.########.....##.....##.##.....##.##.......##....##.........######...######.....###....##....##
.##..##..##.##.......##.....##....##.....##.##.....##.##.......###...##........##....##.##....##...##.##...###...##
.##..##..##.##.......##.....##....##.....##.##.....##.##.......####..##........##.......##........##...##..####..##
.##..##..##.######...########.....##.....##.##.....##.##.......##.##.##.........######..##.......##.....##.##.##.##
.##..##..##.##.......##.....##.....##...##..##.....##.##.......##..####..............##.##.......#########.##..####
.##..##..##.##.......##.....##......##.##...##.....##.##.......##...###.###....##....##.##....##.##.....##.##...###
..###..###..########.########........###.....#######..########.##....##.###.....######...######..##.....##.##....##

''')











import requests
from bs4 import BeautifulSoup
import re

import requests
import re

def credit(url, dosyaAdi):
    try:
        istek = requests.get(url)
        icerikSon = str(istek.content)

        credit_cards = re.findall(r"\b(?:\d[ -]*?){13,16}\b", icerikSon)

        with open(dosyaAdi, "a") as rapor:
            for card in credit_cards:
                rapor.write("Credit Card Number: {}\n".format(card))
            if credit_cards:
                print("[+] Found {} credit card numbers!".format(len(credit_cards)))
            else:
                print("[-] No credit card numbers found.")

    except requests.exceptions.RequestException as e:
        print("Error occurred:", e)

# Example usage with PayPal developer page
credit("https://developer.paypal.com/docs/payflow/payflow-pro/payflow-pro-testing/#credit-card-numbers-for-testing", "credit_report.txt")


# These scanning will be work on the a only domain name not url
import subprocess

def portScanner(domain, dosyaAdi):
    try:
        # Execute Nmap command to scan for open ports and save results to a file
        subprocess.run(["nmap", "-oN", dosyaAdi, "-p1-2000", "-A", "-Pn", "-O", "-sV", domain])
        print("Port scanning completed. Results saved to", dosyaAdi)
    except Exception as e:
        print("Error during port scanning:", e)


def urlEncode(url,dosyaAdi):
    sozluk = {" ": "%20", "!": "%21", "#": "%23", "$": "%24", "%": "%25", "&": "%26", "'": "%27", "(": "%28",
              ")": "%29", "*": "%30", "+": "%2B", ",": "%2C",
              "-": "%2D", ".": "%2E", "/": "%2F", "0": "%30", "1": "%31", "2": "%32", "3": "%33", "4": "%34",
              "5": "%35", "6": "%36", "7": "%37", "8": "%38",
              "9": "%39", ":": "%3A", ";": "%3B", "<": "%3C", "=": "%3D", ">": "%3E", "?": "%3F", "@": "%40",
              "A": "%41", "B": "%42", "C": "%43", "D": "%44",
              "E": "%45", "F": "%46", "G": "%47", "H": "%48", "I": "%49", "J": "%4A", "K": "%4B", "L": "%4C",
              "M": "%4D", "N": "%4E", "O": "%4F", "P": "%50",
              "Q": "%51", "R": "%52", "S": "%53", "T": "%54", "U": "%55", "V": "%56", "W": "%57", "X": "%58",
              "Y": "%59", "Z": "%5A", "[": "%5B", "]": "%5D",
              "^": "%5E", "_": "%5F", "`": "%60", "a": "%61", "b": "%62", "c": "%63", "d": "%64", "e": "%65",
              "f": "%66", "g": "%67", "h": "%68", "i": "%69",
              "j": "%6A", "k": "%6B", "l": "%6C", "m": "%6D", "n": "%6E", "o": "%6F", "p": "%70", "q": "%71",
              "r": "%72", "s": "%73", "t": "%74", "u": "%75",
              "v": "%76", "w": "%77", "y": "%78", "z": "%7A", "{": "%7B", "|": "%7C", "}": "%7D", "~": "%7E"}
    encodeURL = ""
    for i in url:
        encodeURL += sozluk[i]
    print ("[+]Encoded URL:",encodeURL)       
    raporIcerik="[+]Encoded URL:"+encodeURL+"\n"
    rapor = open(dosyaAdi, "a")
    rapor.write(raporIcerik)
    rapor.close()
import http.client

import http.client

def method_check(url, report_file):
    try:
        # Parse the URL to extract the host and path
        url_components = urlparse(url)
        host = url_components.netloc
        path = url_components.path if url_components.path else '/'

        # Establish a connection to the host
        conn = http.client.HTTPConnection(host)

        # Send an OPTIONS request
        conn.request("OPTIONS", path)
        response = conn.getresponse()

        # Read the response
        response_data = response.read().decode()

        # Extract the allowed methods from the response header
        allowed_methods = response.getheader('Allow')

        # Check if allowed_methods is None
        if allowed_methods is not None:
            # Print the allowed methods
            print("Allowed HTTP methods:", allowed_methods)

            # Write the allowed methods to the report file
            with open(report_file, "a") as file:
                file.write("Allowed HTTP methods: " + allowed_methods + "\n")
        else:
            print("No allowed methods found in the response.")

        # Close the connection
        conn.close()

    except Exception as e:
        print("Error checking methods:", e)




import ssl
import socket

def certificateInformation(domain, dosyaAdi):
    try:
        # Disable SSL certificate caching
        context = ssl.create_default_context(cadata=False)
        server = context.wrap_socket(socket.socket(), server_hostname=domain)
        server.connect((url, 443))
        certificate = server.getpeercert()
        print("[+] Certificate Serial Number:", certificate.get('serialNumber'))
        print("[+] Certificate SSL Version:", certificate.get('version'))
        print("[+] Certificate:", certificate)

        raporIcerik = "[+] Certificate Serial Number: {}\n".format(certificate.get('serialNumber'))
        raporIcerik += "[+] Certificate SSL Version: {}\n".format(certificate.get('version'))
        raporIcerik += "[+] Certificate: {}\n".format(certificate)

        with open(dosyaAdi, "a") as rapor:
            rapor.write(raporIcerik)
    except Exception as e:
        print("Error occurred:", e)

# Test the function
domain = ""
dosyaAdi = ""
certificateInformation(domain, dosyaAdi)

import requests
from lxml import html






import requests

def directory_traversal(url, dosyaAdi):
    try:
        # Ensure the URL has a scheme (http:// or https://)
        if not url.startswith('http://') and not url.startswith('https://'):
            url = 'https://' + url  # Assume HTTPS if scheme is not provided

        # Construct the traversal payload
        payload = "../../../../../../etc/passwd"
        full_url = f"{url}?file={payload}"

        # Send the request
        response = requests.get(full_url, verify=False)

        # Check the response
        if response.status_code == 200:
            print("[+] Directory traversal possible, payload:", payload)
            print("Response:", response.content)
            with open(dosyaAdi, "a") as rapor:
                rapor.write("[+] Directory traversal possible, payload: {}\n".format(payload))
                rapor.write("Response: {}\n".format(response.content))
        else:
            print("[-] Directory traversal isn't possible, payload:", payload)
            print("Response:", response.content)
            with open(dosyaAdi, "a") as rapor:
                rapor.write("[-] Directory traversal isn't possible, payload: {}\n".format(payload))
                rapor.write("Response: {}\n".format(response.content))
    except Exception as e:
        print("Error during Directory Traversal:", e)

# Example usage:
directory_traversal("", "report.txt")

import requests

import requests

def file_include(url, dosyaAdi):
    try:
        # Split the URL to extract the base URL
        base_url = url.split('=')[0]

        # Define the path for the file inclusion payload
        path = "../../../../../../etc/passwd"

        # Construct the full URL by combining the base URL and the payload path
        full_url = base_url + '=' + path

        # Check if the URL already contains a scheme, if not, prepend "http://"
        if not full_url.startswith('http'):
            full_url = 'http://' + full_url

        # Make a GET request to fetch the content of the URL
        response = requests.get(full_url, verify=False)

        # Check if the response status code is 200 (OK)
        if response.status_code == 200:
            content = response.content.decode('utf-8')

            # Check if the content contains the string "www-data"
            if "www-data" in content:
                print("[+] File inclusion possible, payload: ../../../../../../etc/passwd")
                print("Response:", content)

                # Write the result to the report file
                with open(dosyaAdi, "a") as rapor:
                    rapor.write("[+] File inclusion possible, payload: ../../../../../../etc/passwd\n")
                    rapor.write("Response:" + content + "\n")
            else:
                print("[-] File inclusion isn't possible, payload: ../../../../../../etc/passwd")
                print("Response:", content)

                # Write the result to the report file
                with open(dosyaAdi, "a") as rapor:
                    rapor.write("[-] File inclusion isn't possible, payload: ../../../../../../etc/passwd\n")
                    rapor.write("Response:" + content + "\n")
        else:
            print("[-] URL is not valid or file not found:", full_url)
    except Exception as e:
        print("Error during File Inclusion:", e)



def mail_check(url, dosyaAdi):
    try:
        istek = requests.get(url, verify=True)
        content_text = istek.content.decode('utf-8')  # Decode content to text
        emails = re.findall(r'[\w\.-]+@[\w\.-]+', content_text)  # Fix the regex pattern
        if emails:
            for email in emails:
                print("[+] Email found:", email)
                raporIcerik = "[+] Email found: " + email + "\n"
                with open(dosyaAdi, "a") as rapor:
                    rapor.write(raporIcerik)
        else:
            print("[-] No email addresses found on the page.")
    except Exception as e:
        print("Error extracting emails:", e)

def headerInformation(url, dosyaAdi):
    raporIcerik = ""
    try:
        sonuc = requests.get(url, verify=False)
        print("[+]Server: ", sonuc.headers.get('Server'))
        print("[+]Technology: ", sonuc.headers.get('X-Powered-By'))

        contenttype = sonuc.headers.get('X-Content-Type')
        if contenttype:
            print("[+] X-Content-Type available")
            raporIcerik += "[+] X-Content-Type available\n"
            if "nosniff" in contenttype:
                print("[+] X-Content-type is secure")
                raporIcerik += "[+] X-Content-type is secure\n"
            else:
                print("[-] X-Content-type is not secure")
                raporIcerik += "[-] X-Content-type is not secure\n"
        else:
            print("[-] X-Content-Type isn't available")
            raporIcerik += "[-] X-Content-Type isn't available\n"

        x_xss_protection = sonuc.headers.get('X-XSS-Protection')
        if x_xss_protection:
            if x_xss_protection == "0":
                print("[+]No XSS protection")
                raporIcerik += "[+]No XSS protection\n"
            elif x_xss_protection == "1":
                print("[-]XSS protection possible")
                raporIcerik += "[-]XSS protection possible\n"
    except requests.RequestException as e:
        print("An error occurred while fetching the URL:", e)
        return  # Exit the function if an error occurs

    with open(dosyaAdi, "a") as rapor:
        rapor.write(raporIcerik)





def link(url, dosyaAdi):
    isimSayi1 = url.find(".")
    isim = url[isimSayi1 + 1:]
    isimSayi2 = isim.find(".")
    isim = isim[:isimSayi2]
    istek = requests.get(url, verify=False)
    content_text = istek.content.decode('utf-8')  # Decode content to text
    sonuc = re.findall(
        r"""(?i)\b((?:https?:(?:/{1,3}|[a-z0-9%])|[a-z0-9.\-]+[.](?:com|net|org|edu|gov|mil|aero|asia|biz|cat|coop|info|int|jobs|mobi|museum|name|post|pro|tel|travel|xxx|ac|ad|ae|af|ag|ai|al|am|an|ao|aq|ar|as|at|au|aw|ax|az|ba|bb|bd|be|bf|bg|bh|bi|bj|bm|bn|bo|br|bs|bt|bv|bw|by|bz|ca|cc|cd|cf|cg|ch|ci|ck|cl|cm|cn|co|cr|cs|cu|cv|cx|cy|cz|dd|de|dj|dk|dm|do|dz|ec|ee|eg|eh|er|es|et|eu|fi|fj|fk|fm|fo|fr|ga|gb|gd|ge|gf|gg|gh|gi|gl|gm|gn|gp|gq|gr|gs|gt|gu|gw|gy|hk|hm|hn|hr|ht|hu|id|ie|il|im|in|io|iq|ir|is|it|je|jm|jo|jp|ke|kg|kh|ki|km|kn|kp|kr|kw|ky|kz|la|lb|lc|li|lk|lr|ls|lt|lu|lv|ly|ma|mc|md|me|mg|mh|mk|ml|mm|mn|mo|mp|mq|mr|ms|mt|mu|mv|mw|mx|my|mz|na|nc|ne|nf|ng|ni|nl|no|np|nr|nu|nz|om|pa|pe|pf|pg|ph|pk|pl|pm|pn|pr|ps|pt|pw|py|qa|re|ro|rs|ru|rw|sa|sb|sc|sd|se|sg|sh|si|sj|Ja|sk|sl|sm|sn|so|sr|ss|st|su|sv|sx|sy|sz|tc|td|tf|tg|th|tj|tk|tl|tm|tn|to|tp|tr|tt|tv|tw|tz|ua|ug|uk|us|uy|uz|va|vc|ve|vg|vi|vn|vu|wf|ws|ye|yt|yu|za|zm|zw)/)(?:[^\s()<>{}\[\]]+|\([^\s()]*?\([^\s()]+\)[^\s()]*?\)|\([^\s]+?\))+(?:\([^\s()]*?\([^\s()]+\)[^\s()]*?\)|\([^\s]+?\)|[^\s`!()\[\]{};:'".,<>?«»“”‘’])|(?:(?<!@)[a-z0-9]+(?:[.\-][a-z0-9]+)*[.](?:com|net|org|edu|gov|mil|aero|asia|biz|cat|coop|info|int|jobs|mobi|museum|name|post|pro|tel|travel|xxx|ac|ad|ae|af|ag|ai|al|am|an|ao|aq|ar|as|at|au|aw|ax|az|ba|bb|bd|be|bf|bg|bh|bi|bj|bm|bn|bo|br|bs|bt|bv|bw|by|bz|ca|cc|cd|cf|cg|ch|ci|ck|cl|cm|cn|co|cr|cs|cu|cv|cx|cy|cz|dd|de|dj|dk|dm|do|dz|ec|ee|eg|eh|er|es|et|eu|fi|fj|fk|fm|fo|fr|ga|gb|gd|ge|gf|gg|gh|gi|gl|gm|gn|gp|gq|gr|gs|gt|gu|gw|gy|hk|hm|hn|hr|ht|hu|id|ie|il|im|in|io|iq|ir|is|it|je|jm|jo|jp|ke|kg|kh|ki|km|kn|kp|kr|kw|ky|kz|la|lb|lc|li|lk|lr|ls|lt|lu|lv|ly|ma|mc|md|me|mg|mh|mk|ml|mm|mn|mo|mp|mq|mr|ms|mt|mu|mv|mw|mx|my|mz|na|nc|ne|nf|ng|ni|nl|no|np|nr|nu|nz|om|pa|pe|pf|pg|ph|pk|pl|pm|pn|pr|ps|pt|pw|py|qa|re|ro|rs|ru|rw|sa|sb|sc|sd|se|sg|sh|si|sj|Ja|sk|sl|sm|sn|so|sr|ss|st|su|sv|sx|sy|sz|tc|td|tf|tg|th|tj|tk|tl|tm|tn|to|tp|tr|tt|tv|tw|tz|ua|ug|uk|us|uy|uz|va|vc|ve|vg|vi|vn|vu|wf|ws|ye|yt|yu|za|zm|zw)\b/?(?!@)))""",
        content_text
    )
    for i in sonuc:
        with open(dosyaAdi + "_" + isim + "_link.txt", 'a') as f:
            f.write(i)
            f.write("\n")
if args:
    url = getattr(args, 'web_URL')
    print("[+] URL:", url)
    
    domain = urlparse(url).netloc
    dosyaAdi = "{}_report.txt".format(domain)
    with open(dosyaAdi, "a") as rapor:
        rapor.write(url + "\n")

    action = args.action

    if action == "portscanner":
        portScanner(url, dosyaAdi)
    elif action == "urlEncode":
        urlEncode(url, dosyaAdi)

    elif action == "method":
        method_check(url, dosyaAdi)


    elif action == "directoryTraversal":
        directory_traversal(url, dosyaAdi)
        
    elif action == "fileInclude":
        file_include(url, dosyaAdi)
        
    elif action == "mail":
        mail_check(url, dosyaAdi)
        
    elif action == "credit":
        credit(url,dosyaAdi)
        
    elif action == "certificate":
        certificateInformation(url,dosyaAdi)
        
    elif action == "headercheck":
        headerInformation(url,dosyaAdi)
        
    elif action == "links":
        link(url, dosyaAdi)
    else:
        print("Invalid action.")
        
        
        
        
        print('''
                                      
$$$$$$$$\ $$\                           $$\             $$\     $$\                   
\__$$  __|$$ |                          $$ |            \$$\   $$  |                  
   $$ |   $$$$$$$\   $$$$$$\  $$$$$$$\  $$ |  $$\        \$$\ $$  /$$$$$$\  $$\   $$\ 
   $$ |   $$  __$$\  \____$$\ $$  __$$\ $$ | $$  |        \$$$$  /$$  __$$\ $$ |  $$ |
   $$ |   $$ |  $$ | $$$$$$$ |$$ |  $$ |$$$$$$  /          \$$  / $$ /  $$ |$$ |  $$ |
   $$ |   $$ |  $$ |$$  __$$ |$$ |  $$ |$$  _$$<            $$ |  $$ |  $$ |$$ |  $$ |
   $$ |   $$ |  $$ |\$$$$$$$ |$$ |  $$ |$$ | \$$\           $$ |  \$$$$$$  |\$$$$$$  |
   \__|   \__|  \__| \_______|\__|  \__|\__|  \__|          \__|   \______/  \______/ 
                                                                                                                                                               
      ''')
