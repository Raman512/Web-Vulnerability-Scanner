import argparse
import requests
from urllib.parse import urlparse, urlunparse

desc = "Tulpar - Web Vulnerability Scanner"
parser = argparse.ArgumentParser(description=desc)
parser.add_argument("action", help="Action: full ")
parser.add_argument("web_URL", help="URL")
args = parser.parse_args()


def add_scheme(url):
    # Check if the URL has a scheme, if not, add 'http://' as the default scheme
    parsed_url = urlparse(url)
    if not parsed_url.scheme:
        # If no scheme is provided, default to 'http'
        url_with_scheme = urlunparse(('http',) + parsed_url[1:])
    else:
        url_with_scheme = url
    return url_with_scheme


def commandInjection(url, dosyaAdi, payload_file):
    try:
        # Read the payload from the file
        with open(payload_file, 'r') as f:
            payload = f.read().strip()

        url_with_scheme = add_scheme(url)  # Ensure the URL has a scheme
        deger = url_with_scheme.find("=")
        # Inject the payload into the URL
        istek = url_with_scheme[:deger + 1] + payload
        sonuc = requests.get(istek, verify=False)
        if "www-data" in sonuc.content:
            print("[+] Command injection possible, payload:", payload)
            print("Response: ", sonuc.content)
            with open(dosyaAdi, "a") as rapor:
                raporIcerik = "[+] Command injection possible, payload: {}\n".format(payload)
                raporIcerik += "Response: " + str(sonuc.content) + "\n"
                rapor.write(raporIcerik)
        else:
            print("[-] Command injection isn't possible, payload:", payload)
            print("Response: ", sonuc.content)
            with open(dosyaAdi, "a") as rapor:
                raporIcerik = "[-] Command injection isn't possible, payload: {}\n".format(payload)
                raporIcerik += "Response: " + str(sonuc.content) + "\n"
                rapor.write(raporIcerik)
    except FileNotFoundError:
        print("Payload file not found:", payload_file)
    except requests.exceptions.RequestException as e:
        print("Request Error:", e)
    except Exception as e:
        print("Error:", e)


def sql(url, dosyaAdi, payloadDosya):
    try:
        with open(payloadDosya, "r") as sqlDosya:
            sqlPayload = sqlDosya.readlines()

        if "=" in url:
            deger = url.find('=')
            for payload in sqlPayload:
                try:
                    payload = payload.strip()  # Remove trailing newline
                    yazi = url[:deger + 1] + payload
                    response = requests.get(yazi)
                    if response.status_code == 200:
                        print("[+] SQLi payload:", payload)
                        print("[+] SQLi URL:", yazi)
                        with open(dosyaAdi, "a") as rapor:
                            rapor.write("[+] SQLi payload: {}\n".format(payload))
                            rapor.write("[+] SQLi URL: {}\n".format(yazi))
                    else:
                        print("[-] SQLi payload:", payload)
                        print("[-] SQLi URL:", yazi)
                        with open(dosyaAdi, "a") as rapor:
                            rapor.write("[-] SQLi payload: {}\n".format(payload))
                            rapor.write("[-] SQLi URL: {}\n".format(yazi))
                except Exception as e:
                    print("Error occurred:", e)
        else:
            print("[-] SQLi isn't available")
            with open(dosyaAdi, "a") as rapor:
                rapor.write("[-] SQLi isn't available\n")
    except Exception as e:
        print("Error occurred:", e)


def xss(url, dosyaAdi, payloadDosya):
    try:
        with open(payloadDosya, "r") as xssDosya:
            xssPayload = xssDosya.readlines()

        esittirIndis = url.find("=")
        if "=" in url:
            for payload in xssPayload:
                try:
                    payload = payload.strip()  # Remove trailing newline
                    istek = url[:esittirIndis + 1] + payload
                    response = requests.get(istek)
                    if payload in response.text:
                        print("[+] XSS payload:", payload)
                        print("[+] XSS URL:", istek)
                        with open(dosyaAdi, "a") as rapor:
                            rapor.write("[+] XSS payload: {}\n".format(payload))
                            rapor.write("[+] XSS URL: {}\n".format(istek))
                    else:
                        print("[-] XSS payload:", payload)
                        print("[-] XSS URL:", istek)
                        with open(dosyaAdi, "a") as rapor:
                            rapor.write("[-] XSS payload: {}\n".format(payload))
                            rapor.write("[-] XSS URL: {}\n".format(istek))
                except Exception as e:
                    print("Error occurred:", e)
        else:
            print("[-] XSS isn't available")
            with open(dosyaAdi, "a") as rapor:
                rapor.write("[-] XSS isn't available\n")
    except Exception as e:
        print("Error occurred:", e)


if args:
    url = getattr(args, 'web_URL')
    print("[+] URL:", url, "\n==========")

    # Write URL to the report file
    dosyaAdi = str(url).split("/")[2] + "_report.txt"
    with open(dosyaAdi, "a") as rapor:
        raporIcerik = url + "\n"
        rapor.write(raporIcerik)

    if args.action == "sql":
        print("==========\nPerforming SQL action...\n==========")
        sql(url, dosyaAdi, "/home/raman/Desktop/Web Vulnerability Scanner/sqlpayload.txt")
        print("==========\nSQL action completed.\n==========")

    elif args.action == "xss":
        print("==========\nPerforming XSS action...\n==========")
        xss(url, dosyaAdi, "/home/raman/Desktop/Web Vulnerability Scanner/xsspayload.txt")
        print("==========\nXSS action completed.\n==========")

    elif args.action == "commandInjection":
        print("==========\nPerforming Command Injection action...\n==========")
        commandInjection(url, dosyaAdi, "/home/raman/Desktop/Web Vulnerability Scanner/cmdpayload.txt")
        print("==========\nCommand Injection action completed.\n==========")

    else:
        exit()

